cor_with_target <- cor(valid_data[, sapply(valid_data, is.numeric)], valid_data$dep_delay, use = "complete.obs")
# Remove 'dep_delay' from the result as it's perfectly correlated with itself
cor_with_target <- cor_with_target[names(cor_with_target) != "dep_delay"]
# Sort the correlations by absolute value in descending order
cor_with_target_sorted <- sort(cor_with_target, decreasing = TRUE, method = "radix")
# Print the sorted result
print(cor_with_target_sorted)
# Select numeric columns
numeric_columns <- flights[, sapply(flights, is.numeric)]
# Remove columns with zero variance (standard deviation = 0)
numeric_columns <- numeric_columns[, sapply(numeric_columns, function(x) sd(x, na.rm = TRUE) > 0)]
# Remove rows with missing values in 'dep_delay' and other numeric columns
valid_data <- flights[!is.na(flights$dep_delay) & complete.cases(numeric_columns), ]
# Compute the correlation between 'dep_delay' and the other numeric columns
cor_with_target <- cor(valid_data[, sapply(valid_data, is.numeric)], valid_data$dep_delay, use = "complete.obs")
# Remove 'dep_delay' from the result as it's perfectly correlated with itself
cor_with_target <- cor_with_target[names(cor_with_target) != "dep_delay"]
# Sort the correlations by absolute value in descending order
cor_with_target_sorted <- sort(cor_with_target, decreasing = TRUE, method = "radix")
# Print the sorted result
print(cor_with_target_sorted)
# Select numeric columns
numeric_columns <- flights[, sapply(flights, is.numeric)]
# Remove columns with zero variance (standard deviation = 0)
numeric_columns <- numeric_columns[, sapply(numeric_columns, function(x) sd(x, na.rm = TRUE) > 0)]
# Remove rows with missing values in 'dep_delay' and other numeric columns
valid_data <- flights[!is.na(flights$dep_delay) & complete.cases(numeric_columns), ]
# Compute the correlation between 'dep_delay' and the other numeric columns
cor_with_target <- cor(valid_data[, sapply(valid_data, is.numeric)], valid_data$dep_delay, use = "complete.obs")
# Check the structure of the correlation result
print(cor_with_target)
# Load necessary library
library(ggplot2)
# Create a data frame with 'dep_delay' and 'arr_delay' columns for plotting
df_delays <- flights[, c("dep_delay", "arr_delay")]
# Reshape the data to long format for easier plotting
library(tidyr)
df_long <- gather(df_delays, key = "delay_type", value = "delay", dep_delay, arr_delay)
# Create the bar chart using ggplot
ggplot(df_long, aes(x = delay_type, y = delay, fill = delay_type)) +
geom_bar(stat = "identity", position = "dodge", show.legend = FALSE) +
labs(title = "Departure vs Arrival Delays",
x = "Delay Type",
y = "Delay in Minutes") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
df <- df %>%
mutate(delayed = ifelse(dep_delay > 15, "Yes", "No")) %>%
select(dep_time, arr_time, air_time, distance, dep_delay, arr_delay, delayed) %>%
na.omit()  # Remove missing values
df$delayed <- as.factor(df$delayed)
set.seed(123)  # For reproducibility
train_index <- sample(1:nrow(df), 0.7 * nrow(df))  # 70% training data
train_data <- df[train_index, ]
test_data <- df[-train_index, ]
head(train_data)  # View first few rows
# Load necessary library
library(ggplot2)
# Assuming 'df' is your full dataset
# Create a scatter plot to compare dep_delay and arr_delay
ggplot(df, aes(x = dep_delay, y = arr_delay)) +
geom_point(alpha = 0.1, color = "blue") +  # alpha for transparency
labs(title = "Comparison of Departure Delay vs Arrival Delay",
x = "Departure Delay (minutes)",
y = "Arrival Delay (minutes)") +
theme_minimal()
# Load necessary library
library(ggplot2)
# Assuming 'df' is your full dataset
# Create a scatter plot to compare dep_delay and dep_time
ggplot(df, aes(x = dep_time, y = dep_delay)) +
geom_point(alpha = 0.1, color = "blue") +  # alpha for transparency
labs(title = "Comparison of Departure Time vs Departure Delay",
x = "Departure Time (minutes)",
y = "Departure Delay (minutes)") +
theme_minimal()
```{r}
ggplot(df, aes(x = distance, y = dep_delay)) +
geom_point(alpha = 0.1, color = "blue") +  # alpha for transparency
labs(title = "Comparison of Distance vs Departure Delay",
x = "Distance (miles)",
y = "Departure Delay (minutes)") +
theme_minimal()
knitr::opts_chunk$set(echo = TRUE)
# Load libraries
library(nycflights13)
library(e1071)
library(dplyr)
library(caret)
library(ggplot2)
# Load the data from 'flights'
data("flights")
df <- flights  # Store in a variable
# View first few rows
head(df)
# Select numeric columns for analysis
numeric_columns <- flights[, sapply(flights, is.numeric)]
# Remove columns with zero variance
numeric_columns <- numeric_columns[, sapply(numeric_columns, function(x) sd(x, na.rm = TRUE) > 0)]
# Remove rows with missing values in 'dep_delay' and other numeric columns
valid_data <- flights[!is.na(flights$dep_delay) & complete.cases(numeric_columns), ]
# Compute the correlation between 'dep_delay' and the other numeric columns
cor_with_target <- cor(valid_data[, sapply(valid_data, is.numeric)], valid_data$dep_delay, use = "complete.obs")
# Check the structure of the correlation result
print(cor_with_target)
# Prepare data by mutating the 'delayed' column based on dep_delay
df <- df %>%
mutate(delayed = ifelse(dep_delay > 15, "Yes", "No")) %>%
select(year, month, day, dep_time, sched_dep_time, sched_arr_time, carrier, origin, dest, hour, minute, time_hour, arr_time, air_time, distance, dep_delay, arr_delay, delayed) %>%
na.omit()  # Remove missing values
# Convert 'delayed' to a factor
df$delayed <- as.factor(df$delayed)
# Split data into training and testing sets (70% train, 30% test)
set.seed(123)  # For reproducibility
train_index <- sample(1:nrow(df), 0.7 * nrow(df))  # 70% training data
train_data <- df[train_index, ]
test_data <- df[-train_index, ]
# Check the first few rows of the training data
head(train_data)
# Ensure factor columns in training and test data have the same levels
test_data$carrier <- factor(test_data$carrier, levels = levels(train_data$carrier))
test_data$origin <- factor(test_data$origin, levels = levels(train_data$origin))
test_data$dest <- factor(test_data$dest, levels = levels(train_data$dest))
test_data$delayed <- factor(test_data$delayed, levels = levels(train_data$delayed))
# Check the structure of the test data to ensure correct factor levels
str(test_data)
# Remove the dep_delay and arr_delay columns from both train and test data
train_data <- train_data %>% select(-dep_delay, -arr_delay, -year)
test_data <- test_data %>% select(-dep_delay, -arr_delay, - year)
# Check column names after removing
colnames(train_data)
colnames(test_data)
# Select the first 100 rows for training
train_data_subset <- head(train_data, 100)
# Train the SVM model using the subset of the data
svm_model <- svm(delayed ~ ., data = train_data_subset, kernel = "radial")
# Make predictions on the test data
predictions <- predict(svm_model, test_data)
# Select the first 100 rows for training
train_data_subset <- head(train_data, 100)
# Convert categorical columns to factors
train_data_subset$carrier <- as.factor(train_data_subset$carrier)
train_data_subset$origin <- as.factor(train_data_subset$origin)
train_data_subset$dest <- as.factor(train_data_subset$dest)
train_data_subset$delayed <- as.factor(train_data_subset$delayed)
# Identify numeric columns to scale
numeric_columns <- sapply(train_data_subset, is.numeric)
# Subset the numeric columns for scaling
train_data_numeric <- train_data_subset[, numeric_columns]
# Scale the numeric columns
train_data_numeric_scaled <- scale(train_data_numeric)
# Combine scaled numeric data with non-numeric (factor) columns
train_data_final <- cbind(train_data_subset[, !numeric_columns], train_data_numeric_scaled)
svm_model <- svm(delayed ~ ., data = train_data_final, kernel = "radial")
# Make predictions on the test data
predictions <- predict(svm_model, test_data)
# Load the data from 'flights'
data("flights")
df <- flights  # Store in a variable
# View first few rows
head(df)
# Select numeric columns for analysis
numeric_columns <- flights[, sapply(flights, is.numeric)]
# Remove columns with zero variance
numeric_columns <- numeric_columns[, sapply(numeric_columns, function(x) sd(x, na.rm = TRUE) > 0)]
# Remove rows with missing values in 'dep_delay' and other numeric columns
valid_data <- flights[!is.na(flights$dep_delay) & complete.cases(numeric_columns), ]
# Compute the correlation between 'dep_delay' and the other numeric columns
cor_with_target <- cor(valid_data[, sapply(valid_data, is.numeric)], valid_data$dep_delay, use = "complete.obs")
# Check the structure of the correlation result
print(cor_with_target)
# Prepare data by mutating the 'delayed' column based on dep_delay
df <- df %>%
mutate(delayed = ifelse(dep_delay > 15, "Yes", "No")) %>%
select(month, day, dep_time, sched_dep_time, sched_arr_time, carrier, origin, dest, hour, minute, time_hour, arr_time, air_time, distance, dep_delay, arr_delay, delayed) %>%
na.omit()  # Remove missing values
# Convert 'delayed' to a factor
df$delayed <- as.factor(df$delayed)
# Split data into training and testing sets (70% train, 30% test)
set.seed(123)  # For reproducibility
train_index <- sample(1:nrow(df), 0.7 * nrow(df))  # 70% training data
train_data <- df[train_index, ]
test_data <- df[-train_index, ]
# Check the first few rows of the training data
head(train_data)
# Ensure factor columns in training and test data have the same levels
test_data$carrier <- factor(test_data$carrier, levels = levels(train_data$carrier))
test_data$origin <- factor(test_data$origin, levels = levels(train_data$origin))
test_data$dest <- factor(test_data$dest, levels = levels(train_data$dest))
test_data$delayed <- factor(test_data$delayed, levels = levels(train_data$delayed))
# Check the structure of the test data to ensure correct factor levels
str(test_data)
# Remove the dep_delay and arr_delay columns from both train and test data
train_data <- train_data %>% select(-dep_delay, -arr_delay)
test_data <- test_data %>% select(-dep_delay, -arr_delay)
# Check column names after removing
colnames(train_data)
colnames(test_data)
# Select the first 100 rows for training
train_data_subset <- head(train_data, 100)
# Check the first few rows of the subset data
head(train_data_subset)
# Convert categorical columns to factors for the training data subset
train_data_subset$carrier <- as.factor(train_data_subset$carrier)
train_data_subset$origin <- as.factor(train_data_subset$origin)
train_data_subset$dest <- as.factor(train_data_subset$dest)
train_data_subset$delayed <- as.factor(train_data_subset$delayed)
# Identify numeric columns to scale
numeric_columns <- sapply(train_data_subset, is.numeric)
# Subset the numeric columns for scaling
train_data_numeric <- train_data_subset[, numeric_columns]
# Scale the numeric columns
train_data_numeric_scaled <- scale(train_data_numeric)
# Combine scaled numeric data with non-numeric (factor) columns
train_data_final <- cbind(train_data_subset[, !numeric_columns], train_data_numeric_scaled)
# Check the final data structure
str(train_data_final)
# Train the SVM model on the subset data
svm_model <- svm(delayed ~ ., data = train_data_final, kernel = "radial")
# Check the model summary
summary(svm_model)
# Make predictions on the test data
predictions <- predict(svm_model, test_data)
# Load the data from 'flights'
data("flights")
df <- flights  # Store in a variable
# View first few rows
head(df)
# Prepare data by mutating the 'delayed' column based on dep_delay
df <- df %>%
mutate(delayed = ifelse(dep_delay > 15, "Yes", "No")) %>%
select(year, month, day, dep_time, sched_dep_time, sched_arr_time, carrier, origin, dest, hour, minute, time_hour, arr_time, air_time, distance, dep_delay, arr_delay, delayed) %>%
na.omit()  # Remove missing values
# Convert 'delayed' to a factor
df$delayed <- as.factor(df$delayed)
# Convert 'carrier', 'origin', and 'dest' to factors
df$carrier <- as.factor(df$carrier)
df$origin <- as.factor(df$origin)
df$dest <- as.factor(df$dest)
# Split data into training and testing sets (70% train, 30% test)
set.seed(123)  # For reproducibility
train_index <- sample(1:nrow(df), 0.7 * nrow(df))  # 70% training data
train_data <- df[train_index, ]
test_data <- df[-train_index, ]
# Ensure factor columns in training and test data have the same levels
test_data$carrier <- factor(test_data$carrier, levels = levels(train_data$carrier))
test_data$origin <- factor(test_data$origin, levels = levels(train_data$origin))
test_data$dest <- factor(test_data$dest, levels = levels(train_data$dest))
test_data$delayed <- factor(test_data$delayed, levels = levels(train_data$delayed))
# Check the structure of the test data to ensure correct factor levels
str(test_data)
# Remove dep_delay and arr_delay columns from both train and test data
train_data <- train_data %>% select(-dep_delay, -arr_delay, -year)
test_data <- test_data %>% select(-dep_delay, -arr_delay, - year)
# Identify numeric columns to scale
numeric_columns_train <- sapply(train_data, is.numeric)
# Subset the numeric columns for scaling
train_data_numeric <- train_data[, numeric_columns_train]
# Scale the numeric columns in the training data
train_data_numeric_scaled <- scale(train_data_numeric)
# Combine the scaled numeric data with non-numeric (factor) columns
train_data_final <- cbind(train_data[, !numeric_columns_train], train_data_numeric_scaled)
# Identify numeric columns in test_data
numeric_columns_test <- sapply(test_data, is.numeric)
# Subset numeric columns for scaling
test_data_numeric <- test_data[, numeric_columns_test]
# Scale the numeric columns in the test data using the same scale as train data
test_data_numeric_scaled <- scale(test_data_numeric, center = attr(train_data_numeric_scaled, "scaled:center"), scale = attr(train_data_numeric_scaled, "scaled:scale"))
# Combine the scaled numeric data with the non-numeric (factor) columns in the test data
test_data_final <- cbind(test_data[, !numeric_columns_test], test_data_numeric_scaled)
# Check column names to make sure everything matches
colnames(test_data_final) <- colnames(train_data_final)
# Remove dep_delay and arr_delay columns from both train and test data
train_data <- train_data %>% select(-dep_delay, -arr_delay, -year)
# Use only the first 100 rows for training
train_data <- df[1:100, ]
test_data <- df[-(1:100), ]
# Ensure factor columns in training and test data have the same levels
test_data$carrier <- factor(test_data$carrier, levels = levels(train_data$carrier))
test_data$origin <- factor(test_data$origin, levels = levels(train_data$origin))
test_data$dest <- factor(test_data$dest, levels = levels(train_data$dest))
test_data$delayed <- factor(test_data$delayed, levels = levels(train_data$delayed))
# Check the structure of the test data to ensure correct factor levels
str(test_data)
# Remove dep_delay and arr_delay columns from both train and test data
train_data <- train_data %>% select(-dep_delay, -arr_delay, -year)
test_data <- test_data %>% select(-dep_delay, -arr_delay, - year)
# Identify numeric columns to scale
numeric_columns_train <- sapply(train_data, is.numeric)
# Subset the numeric columns for scaling
train_data_numeric <- train_data[, numeric_columns_train]
# Scale the numeric columns in the training data
train_data_numeric_scaled <- scale(train_data_numeric)
# Combine the scaled numeric data with non-numeric (factor) columns
train_data_final <- cbind(train_data[, !numeric_columns_train], train_data_numeric_scaled)
# Identify numeric columns in test_data
numeric_columns_test <- sapply(test_data, is.numeric)
# Subset numeric columns for scaling
test_data_numeric <- test_data[, numeric_columns_test]
# Scale the numeric columns in the test data using the same scale as train data
test_data_numeric_scaled <- scale(test_data_numeric, center = attr(train_data_numeric_scaled, "scaled:center"), scale = attr(train_data_numeric_scaled, "scaled:scale"))
# Combine the scaled numeric data with the non-numeric (factor) columns in the test data
test_data_final <- cbind(test_data[, !numeric_columns_test], test_data_numeric_scaled)
# Check column names to make sure everything matches
colnames(test_data_final) <- colnames(train_data_final)
# Train the SVM model on the training data (first 100 rows)
svm_model <- svm(delayed ~ ., data = train_data_final, kernel = "radial")
# Remove dep_delay and arr_delay columns from both train and test data
train_data <- train_data %>% select(-dep_delay, -arr_delay, -year)
# Use only the first 100 rows for training
train_data <- df[1:100, ]
test_data <- df[-(1:100), ]
# Ensure factor columns in training and test data have the same levels
test_data$carrier <- factor(test_data$carrier, levels = levels(train_data$carrier))
test_data$origin <- factor(test_data$origin, levels = levels(train_data$origin))
test_data$dest <- factor(test_data$dest, levels = levels(train_data$dest))
test_data$delayed <- factor(test_data$delayed, levels = levels(train_data$delayed))
# Check the structure of the test data to ensure correct factor levels
str(test_data)
# Remove dep_delay and arr_delay columns from both train and test data
train_data <- train_data %>% select(-dep_delay, -arr_delay, -year)
test_data <- test_data %>% select(-dep_delay, -arr_delay, - year)
# Identify numeric columns to scale
numeric_columns_train <- sapply(train_data, is.numeric)
# Subset the numeric columns for scaling
train_data_numeric <- train_data[, numeric_columns_train]
# Scale the numeric columns in the training data
train_data_numeric_scaled <- scale(train_data_numeric)
# Combine the scaled numeric data with non-numeric (factor) columns
train_data_final <- cbind(train_data[, !numeric_columns_train], train_data_numeric_scaled)
# Identify numeric columns in test_data
numeric_columns_test <- sapply(test_data, is.numeric)
# Subset numeric columns for scaling
test_data_numeric <- test_data[, numeric_columns_test]
# Scale the numeric columns in the test data using the same scale as train data
test_data_numeric_scaled <- scale(test_data_numeric, center = attr(train_data_numeric_scaled, "scaled:center"), scale = attr(train_data_numeric_scaled, "scaled:scale"))
# Combine the scaled numeric data with the non-numeric (factor) columns in the test data
test_data_final <- cbind(test_data[, !numeric_columns_test], test_data_numeric_scaled)
# Check column names to make sure everything matches
colnames(test_data_final) <- colnames(train_data_final)
# Train the SVM model on the training data (first 100 rows)
svm_model <- svm(delayed ~ ., data = train_data_final, kernel = "radial")
# Prepare data by mutating the 'delayed' column based on dep_delay
df <- df %>%
mutate(delayed = ifelse(dep_delay > 15, "Yes", "No")) %>%
select(year, month, day, dep_time, sched_dep_time, sched_arr_time, carrier, origin, dest, hour, minute, time_hour, arr_time, air_time, distance, dep_delay, arr_delay, delayed) %>%
na.omit()  # Remove missing values
# Convert 'delayed' to a factor
df$delayed <- as.factor(df$delayed)
# Convert 'carrier', 'origin', and 'dest' to factors
df$carrier <- as.factor(df$carrier)
df$origin <- as.factor(df$origin)
df$dest <- as.factor(df$dest)
# Load the data from 'flights'
data("flights")
df <- flights  # Store in a variable
# View first few rows
head(df)
# Prepare data by mutating the 'delayed' column based on dep_delay
df <- df %>%
mutate(delayed = ifelse(dep_delay > 15, "Yes", "No")) %>%
select(year, month, day, dep_time, sched_dep_time, sched_arr_time, carrier, origin, dest, hour, minute, time_hour, arr_time, air_time, distance, dep_delay, arr_delay, delayed) %>%
na.omit()  # Remove missing values
# Convert 'delayed' to a factor
df$delayed <- as.factor(df$delayed)
# Convert 'carrier', 'origin', and 'dest' to factors
df$carrier <- as.factor(df$carrier)
df$origin <- as.factor(df$origin)
df$dest <- as.factor(df$dest)
# Use only the first 100 rows for training
train_data <- df[1:100, ]
test_data <- df[-(1:100), ]
# Check for missing values in the train and test data
sum(is.na(train_data))  # Check missing values in training data
sum(is.na(test_data))   # Check missing values in test data
# Ensure factor columns in training and test data have the same levels
test_data$carrier <- factor(test_data$carrier, levels = levels(train_data$carrier))
test_data$origin <- factor(test_data$origin, levels = levels(train_data$origin))
test_data$dest <- factor(test_data$dest, levels = levels(train_data$dest))
test_data$delayed <- factor(test_data$delayed, levels = levels(train_data$delayed))
# Check the structure of the test data to ensure correct factor levels
str(test_data)
# Remove dep_delay and arr_delay columns from both train and test data
train_data <- train_data %>% select(-dep_delay, -arr_delay, -year)
test_data <- test_data %>% select(-dep_delay, -arr_delay, - year)
# Identify numeric columns to scale
numeric_columns_train <- sapply(train_data, is.numeric)
# Subset the numeric columns for scaling
train_data_numeric <- train_data[, numeric_columns_train]
# Scale the numeric columns in the training data
train_data_numeric_scaled <- scale(train_data_numeric)
# Combine the scaled numeric data with non-numeric (factor) columns
train_data_final <- cbind(train_data[, !numeric_columns_train], train_data_numeric_scaled)
# Identify numeric columns in test_data
numeric_columns_test <- sapply(test_data, is.numeric)
# Subset numeric columns for scaling
test_data_numeric <- test_data[, numeric_columns_test]
# Scale the numeric columns in the test data using the same scale as train data
test_data_numeric_scaled <- scale(test_data_numeric, center = attr(train_data_numeric_scaled, "scaled:center"), scale = attr(train_data_numeric_scaled, "scaled:scale"))
# Combine the scaled numeric data with the non-numeric (factor) columns in the test data
test_data_final <- cbind(test_data[, !numeric_columns_test], test_data_numeric_scaled)
# Check column names to make sure everything matches
colnames(test_data_final) <- colnames(train_data_final)
# Train the SVM model on the training data (first 100 rows)
svm_model <- svm(delayed ~ ., data = train_data_final, kernel = "radial")
train_data_final
# Load the data from 'flights'
data("flights")
df <- flights  # Store in a variable
# View first few rows
head(df)
# Prepare data by mutating the 'delayed' column based on dep_delay
df <- df %>%
mutate(delayed = ifelse(dep_delay > 15, "Yes", "No")) %>%
select(year, month, day, dep_time, sched_dep_time, sched_arr_time, carrier, origin, dest, hour, minute, time_hour, arr_time, air_time, distance, dep_delay, arr_delay, delayed) %>%
na.omit()  # Remove missing values
# Convert 'delayed' to a factor
df$delayed <- as.factor(df$delayed)
# Convert 'carrier', 'origin', and 'dest' to factors
df$carrier <- as.factor(df$carrier)
df$origin <- as.factor(df$origin)
df$dest <- as.factor(df$dest)
df
# Load necessary libraries
library(e1071)  # for SVM
library(caret)  # for model training and evaluation
# Prepare the data for the SVM model
set.seed(123)  # For reproducibility
# Split the data into training and testing sets (80% training, 20% testing)
trainIndex <- createDataPartition(df$delayed, p = 0.8, list = FALSE)
trainData <- df[trainIndex, ]
testData <- df[-trainIndex, ]
# Build the SVM model (linear kernel)
svm_model <- svm(delayed ~ year + month + day + dep_time + sched_dep_time + sched_arr_time +
carrier + origin + dest + air_time + distance + dep_delay + arr_delay,
data = trainData, kernel = "linear")
# View the model summary
summary(svm_model)
# Make predictions on the test data
predictions <- predict(svm_model, testData)
# Evaluate the model's performance
confusionMatrix(predictions, testData$delayed)
# Set seed for reproducibility
set.seed(123)
# Sample a smaller subset (e.g., 10% of the dataset) for training
sample_size <- 0.1  # 10% of the data
sampled_data <- df[sample(nrow(df), size = floor(sample_size * nrow(df))), ]
# Split the sampled data into training and testing sets (80% training, 20% testing)
trainIndex <- createDataPartition(sampled_data$delayed, p = 0.8, list = FALSE)
trainData <- sampled_data[trainIndex, ]
testData <- sampled_data[-trainIndex, ]
# Build the SVM model (linear kernel)
svm_model <- svm(delayed ~ month + day + dep_time + sched_dep_time + sched_arr_time +
carrier + origin + dest + air_time + distance + dep_delay + arr_delay,
data = trainData, kernel = "linear")
# View the model summary
summary(svm_model)
# Make predictions on the test data
predictions <- predict(svm_model, testData)
# Evaluate the model's performance
confusionMatrix(predictions, testData$delayed)
# Set seed for reproducibility
set.seed(123)
# Split the data into training and testing sets (80% training, 20% testing)
trainIndex <- createDataPartition(df$delayed, p = 0.8, list = FALSE)
trainData <- df[trainIndex, ]
testData <- df[-trainIndex, ]
# Build the SVM model (linear kernel)
svm_model <- svm(delayed ~ month + day + dep_time + sched_dep_time + sched_arr_time +
carrier + origin + dest + air_time + distance + dep_delay + arr_delay,
data = trainData, kernel = "linear")
# View the model summary
summary(svm_model)
# Make predictions on the test data
predictions <- predict(svm_model, testData)
# Evaluate the model's performance
confusionMatrix(predictions, testData$delayed)
# Set seed for reproducibility
set.seed(123)
# Split the data into training and testing sets (80% training, 20% testing)
trainIndex <- createDataPartition(df$delayed, p = 0.8, list = FALSE)
trainData <- df[trainIndex, ]
testData <- df[-trainIndex, ]
# Build the SVM model (linear kernel)
svm_model <- svm(delayed ~ month + day + dep_time + sched_dep_time + sched_arr_time +
carrier + origin + dest + air_time + distance,
data = trainData, kernel = "linear")
# View the model summary
summary(svm_model)
# Make predictions on the test data
predictions <- predict(svm_model, testData)
# Evaluate the model's performance
confusionMatrix(predictions, testData$delayed)
# Print confusion matrix
print(cm)
# Plot confusion matrix as a heatmap
cm_table <- as.table(cm)
# Create a confusion matrix
cm <- confusionMatrix(predictions, testData$delayed)
# Print confusion matrix
print(cm)
# Convert confusion matrix to a data frame for visualization
cm_table <- as.table(cm$table)  # Extract confusion matrix table
cm_df <- as.data.frame(cm_table)
colnames(cm_df) <- c("Actual", "Predicted", "Count")
# Plot confusion matrix as a heatmap
ggplot(cm_df, aes(x = Actual, y = Predicted, fill = Count)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +
geom_text(aes(label = Count), color = "black") +
theme_minimal() +
labs(title = "Confusion Matrix Heatmap", x = "Actual", y = "Predicted")
