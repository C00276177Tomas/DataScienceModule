knitr::opts_chunk$set(echo = TRUE)
install.packages("nycflights13")
install.packages("e1071")
install.packages("dplyr")  # For data manipulation
library(nycflights13)
library(e1071)
library(dplyr)
install.packages("ggplot2")
library(ggplot2)
data("flights")
df <- flights  # Store in a variable
head(df)  # View first few rows
df <- df %>%
mutate(delayed = ifelse(dep_delay > 15, "Yes", "No")) %>%
select(dep_time, arr_time, air_time, distance, dep_delay, arr_delay, delayed) %>%
na.omit()  # Remove missing values
df$delayed <- as.factor(df$delayed)
set.seed(123)  # For reproducibility
train_index <- sample(1:nrow(df), 0.7 * nrow(df))  # 70% training data
train_data <- df[train_index, ]
test_data <- df[-train_index, ]
head(train_data)  # View first few rows
# Compute the correlation matrix for numeric columns
correlation_matrix <- cor(df[, sapply(df, is.numeric)], use = "complete.obs")
# Display the correlation matrix
print(correlation_matrix)
# Find pairs with the highest correlation
high_corr <- which(abs(correlation_matrix) > 0.7, arr.ind = TRUE)
# Print the highly correlated column pairs
high_corr_pairs <- data.frame(correlation_matrix[high_corr])
print(high_corr_pairs)
data("flights")
df <- flights  # Store in a variable
head(df)  # View first few rows
# Compute the correlation matrix for numeric columns
correlation_matrix <- cor(df[, sapply(df, is.numeric)], use = "complete.obs")
# Display the correlation matrix
print(correlation_matrix)
# Find pairs with the highest correlation
high_corr <- which(abs(correlation_matrix) > 0.7, arr.ind = TRUE)
# Print the highly correlated column pairs
high_corr_pairs <- data.frame(correlation_matrix[high_corr])
print(high_corr_pairs)
# Compute the correlation matrix for numeric columns
correlation_matrix <- cor(flights[, sapply(flights, is.numeric)], use = "complete.obs")
# Find pairs with the highest correlation (correlation > 0.7)
high_corr <- which(abs(correlation_matrix) > 0.7, arr.ind = TRUE)
# Extract column names and correlation values
high_corr_pairs <- data.frame(
Column1 = rownames(correlation_matrix)[high_corr[, 1]],
Column2 = colnames(correlation_matrix)[high_corr[, 2]],
Correlation = correlation_matrix[high_corr]
)
# Print the result
print(high_corr_pairs)
# Compute the correlation between all numeric columns and the target variable 'dep_delay'
cor_with_target <- cor(flights[, sapply(flights, is.numeric)], flights$dep_delay, use = "complete.obs")
# Convert the result to a data frame for better readability
cor_with_target_df <- data.frame(Column = names(cor_with_target), Correlation = cor_with_target)
# Compute the correlation between all numeric columns and the target variable 'dep_delay'
cor_with_target <- cor(df[, sapply(df, is.numeric)], df$dep_delay, use = "complete.obs")
# Convert the result to a data frame for better readability
cor_with_target_df <- data.frame(Column = names(cor_with_target), Correlation = cor_with_target)
# Select numeric columns
numeric_columns <- flights[, sapply(flights, is.numeric)]
# Compute the correlation between numeric columns and the target variable 'dep_delay'
cor_with_target <- cor(numeric_columns, flights$dep_delay, use = "complete.obs")
# Convert the result to a data frame for better readability
cor_with_target_df <- data.frame(Column = names(cor_with_target), Correlation = cor_with_target)
# Select numeric columns only
numeric_columns <- flights[, sapply(flights, is.numeric)]
# Check if 'dep_delay' is available and match columns
if("dep_delay" %in% names(flights)) {
# Compute the correlation between numeric columns and the target variable 'dep_delay'
cor_with_target <- cor(numeric_columns, flights$dep_delay, use = "complete.obs")
# Convert the result to a data frame for better readability
cor_with_target_df <- data.frame(Column = names(cor_with_target), Correlation = cor_with_target)
# Remove 'dep_delay' from the result as it's perfectly correlated with itself
cor_with_target_df <- cor_with_target_df[cor_with_target_df$Column != "dep_delay", ]
# Sort the result by the absolute value of correlation
cor_with_target_df <- cor_with_target_df[order(abs(cor_with_target_df$Correlation), decreasing = TRUE), ]
# Print the result
print(cor_with_target_df)
} else {
print("The target variable 'dep_delay' is not in the dataset.")
}
# Select numeric columns only
numeric_columns <- flights[, sapply(flights, is.numeric)]
# Select numeric columns and exclude any columns with missing values or constant values
numeric_columns <- flights[, sapply(flights, is.numeric)]
# Remove rows with missing values in 'dep_delay'
valid_data <- flights[!is.na(flights$dep_delay), ]
# Recalculate the correlation only for the valid data
cor_with_target <- cor(valid_data[, sapply(valid_data, is.numeric)], valid_data$dep_delay, use = "complete.obs")
# Convert the result to a data frame for readability
cor_with_target_df <- data.frame(Column = names(cor_with_target), Correlation = cor_with_target)
# Load the necessary library
library(nycflights13)
# Select numeric columns and exclude any columns with missing values or constant values
numeric_columns <- flights[, sapply(flights, is.numeric)]
# Remove rows with missing values in 'dep_delay'
valid_data <- flights[!is.na(flights$dep_delay), ]
# Recalculate the correlation only for the valid data
cor_with_target <- cor(valid_data[, sapply(valid_data, is.numeric)], valid_data$dep_delay, use = "complete.obs")
# Check the structure of the correlation result
print(cor_with_target)
# If the result is a named vector, we can proceed
if (length(cor_with_target) > 0) {
# Convert the result to a data frame for readability
cor_with_target_df <- data.frame(Column = names(cor_with_target), Correlation = cor_with_target)
# Remove 'dep_delay' from the result as it's perfectly correlated with itself
cor_with_target_df <- cor_with_target_df[cor_with_target_df$Column != "dep_delay", ]
# Sort by the absolute value of the correlation
cor_with_target_df <- cor_with_target_df[order(abs(cor_with_target_df$Correlatio
# Load the necessary library
library(nycflights13)
# Select numeric columns and exclude any columns with missing values or constant values
numeric_columns <- flights[, sapply(flights, is.numeric)]
# Remove rows with missing values in 'dep_delay'
valid_data <- flights[!is.na(flights$dep_delay), ]
# Recalculate the correlation only for the valid data
cor_with_target <- cor(valid_data[, sapply(valid_data, is.numeric)], valid_data$dep_delay, use = "complete.obs")
# Check the structure of the correlation result
print(cor_with_target)
# If the result is a named vector, we can proceed
if (length(cor_with_target) > 0) {
# Convert the result to a data frame for readability
cor_with_target_df <- data.frame(Column = names(cor_with_target), Correlation = cor_with_target)
# Remove 'dep_delay' from the result as it's perfectly correlated with itself
cor_with_target_df <- cor_with_target_df[cor_with_target_df$Column != "dep_delay", ]
# Sort by the absolute value of the correlation
cor_with_target_df <- cor_with_target_df[order(abs(cor_with_target_df$Correlatio
# Load the necessary library
library(nycflights13)
# Select numeric columns and exclude any columns with missing values or constant values (zero variance)
numeric_columns <- flights[, sapply(flights, is.numeric)]
# Remove columns with zero variance
numeric_columns <- numeric_columns[, sapply(numeric_columns, function(x) sd(x, na.rm = TRUE) > 0)]
# Remove rows with missing values in 'dep_delay'
valid_data <- flights[!is.na(flights$dep_delay), ]
# Recalculate the correlation only for the valid data
cor_with_target <- cor(valid_data[, sapply(valid_data, is.numeric)], valid_data$dep_delay, use = "complete.obs")
# Check the structure of the correlation result
print(cor_with_target)
# If the result is a named vector, we can proceed
if (length(cor_with_target) > 0) {
# Convert the result to a data frame for readability
cor_with_target_df <- data.frame(Column = names(cor_with_target), Correlation = cor_with_target)
# Remove 'dep_delay' from the result as it's perfectly correlated with itself
cor_with_target_df <- cor_with_target_df[cor_with_target_df$Column != "dep_delay", ]
# Sort by the absolute value of the correlation
cor_with_target_df <- cor_with_target_df[order(abs(cor_with_target_df$Correlation), decreasing = TRUE), ]
# Print the result
print(cor_with_target_df)
} else {
print("No valid correlations found.")
}
# Load the necessary library
library(nycflights13)
# Select numeric columns, excluding non-numeric columns (like 'carrier', 'tailnum', etc.)
numeric_columns <- flights[, sapply(flights, is.numeric)]
# Remove rows with missing values in 'dep_delay'
valid_data <- flights[!is.na(flights$dep_delay), ]
# Compute the correlation between 'dep_delay' and other numeric columns
cor_with_target <- cor(valid_data[, sapply(valid_data, is.numeric)], valid_data$dep_delay, use = "complete.obs")
# Check the structure of the correlation result
print(cor_with_target)
# Convert the result to a data frame for readability
cor_with_target_df <- data.frame(Column = names(cor_with_target), Correlation = cor_with_target)
# Load the necessary library
library(nycflights13)
# Select numeric columns
numeric_columns <- flights[, sapply(flights, is.numeric)]
# Remove columns with zero variance (standard deviation = 0)
numeric_columns <- numeric_columns[, sapply(numeric_columns, function(x) sd(x, na.rm = TRUE) > 0)]
# Remove rows with missing values in 'dep_delay' and other numeric columns
valid_data <- flights[!is.na(flights$dep_delay) & complete.cases(numeric_columns), ]
# Compute the correlation between 'dep_delay' and the other numeric columns
cor_with_target <- cor(valid_data[, sapply(valid_data, is.numeric)], valid_data$dep_delay, use = "complete.obs")
# Check the structure of the correlation result
print(cor_with_target)
# If there are valid correlations, proceed to create a data frame
if (length(cor_with_target) > 0) {
# Convert the result to a data frame for readability
cor_with_target_df <- data.frame(Column = names(cor_with_target), Correlation = cor_with_target)
# Remove 'dep_delay' from the result as it's perfectly correlated with itself
cor_with_target_df <- cor_with_target_df[cor_with_target_df$Column != "dep_delay", ]
# Sort by the absolute value of the correlation
cor_with_target_df <- cor_with_target_df[order(abs(cor_with_target_df$Correlation), decreasing = TRUE), ]
# Print the result
print(cor_with_target_df)
} else {
print("No valid correlations found.")
}
# Load the necessary library
library(nycflights13)
# Select numeric columns
numeric_columns <- flights[, sapply(flights, is.numeric)]
# Remove columns with zero variance (standard deviation = 0)
numeric_columns <- numeric_columns[, sapply(numeric_columns, function(x) sd(x, na.rm = TRUE) > 0)]
# Remove rows with missing values in 'dep_delay' and other numeric columns
valid_data <- flights[!is.na(flights$dep_delay) & complete.cases(numeric_columns), ]
# Compute the correlation between 'dep_delay' and the other numeric columns
cor_with_target <- cor(valid_data[, sapply(valid_data, is.numeric)], valid_data$dep_delay, use = "complete.obs")
# Check the structure of the correlation result
print(cor_with_target)
# Select numeric columns
numeric_columns <- flights[, sapply(flights, is.numeric)]
# Remove columns with zero variance (standard deviation = 0)
numeric_columns <- numeric_columns[, sapply(numeric_columns, function(x) sd(x, na.rm = TRUE) > 0)]
# Remove rows with missing values in 'dep_delay' and other numeric columns
valid_data <- flights[!is.na(flights$dep_delay) & complete.cases(numeric_columns), ]
# Compute the correlation between 'dep_delay' and the other numeric columns
cor_with_target <- cor(valid_data[, sapply(valid_data, is.numeric)], valid_data$dep_delay, use = "complete.obs")
# Check the structure of the correlation result
print(cor_with_target)
# Select numeric columns
numeric_columns <- flights[, sapply(flights, is.numeric)]
# Remove columns with zero variance (standard deviation = 0)
numeric_columns <- numeric_columns[, sapply(numeric_columns, function(x) sd(x, na.rm = TRUE) > 0)]
# Remove rows with missing values in 'dep_delay' and other numeric columns
valid_data <- flights[!is.na(flights$dep_delay) & complete.cases(numeric_columns), ]
# Compute the correlation between 'dep_delay' and the other numeric columns
cor_with_target <- cor(valid_data[, sapply(valid_data, is.numeric)], valid_data$dep_delay, use = "complete.obs")
# Convert the result to a data frame for readability
cor_with_target_df <- data.frame(Column = names(cor_with_target), Correlation = cor_with_target)
# Select numeric columns
numeric_columns <- flights[, sapply(flights, is.numeric)]
# Remove columns with zero variance (standard deviation = 0)
numeric_columns <- numeric_columns[, sapply(numeric_columns, function(x) sd(x, na.rm = TRUE) > 0)]
# Remove rows with missing values in 'dep_delay' and other numeric columns
valid_data <- flights[!is.na(flights$dep_delay) & complete.cases(numeric_columns), ]
# Compute the correlation between 'dep_delay' and the other numeric columns
cor_with_target <- cor(valid_data[, sapply(valid_data, is.numeric)], valid_data$dep_delay, use = "complete.obs")
# Remove 'dep_delay' from the result as it's perfectly correlated with itself
cor_with_target <- cor_with_target[names(cor_with_target) != "dep_delay"]
# Sort the correlations by absolute value in descending order
cor_with_target_sorted <- sort(cor_with_target, decreasing = TRUE, method = "radix")
# Print the sorted result
print(cor_with_target_sorted)
data("flights")
df <- flights  # Store in a variable
head(df)  # View first few rows
# Select numeric columns
numeric_columns <- flights[, sapply(flights, is.numeric)]
# Remove columns with zero variance (standard deviation = 0)
numeric_columns <- numeric_columns[, sapply(numeric_columns, function(x) sd(x, na.rm = TRUE) > 0)]
# Remove rows with missing values in 'dep_delay' and other numeric columns
valid_data <- flights[!is.na(flights$dep_delay) & complete.cases(numeric_columns), ]
# Compute the correlation between 'dep_delay' and the other numeric columns
cor_with_target <- cor(valid_data[, sapply(valid_data, is.numeric)], valid_data$dep_delay, use = "complete.obs")
# Remove 'dep_delay' from the result as it's perfectly correlated with itself
cor_with_target <- cor_with_target[names(cor_with_target) != "dep_delay"]
# Sort the correlations by absolute value in descending order
cor_with_target_sorted <- sort(cor_with_target, decreasing = TRUE, method = "radix")
# Print the sorted result
print(cor_with_target_sorted)
# Select numeric columns
numeric_columns <- flights[, sapply(flights, is.numeric)]
# Remove columns with zero variance (standard deviation = 0)
numeric_columns <- numeric_columns[, sapply(numeric_columns, function(x) sd(x, na.rm = TRUE) > 0)]
# Remove rows with missing values in 'dep_delay' and other numeric columns
valid_data <- flights[!is.na(flights$dep_delay) & complete.cases(numeric_columns), ]
# Compute the correlation between 'dep_delay' and the other numeric columns
cor_with_target <- cor(valid_data[, sapply(valid_data, is.numeric)], valid_data$dep_delay, use = "complete.obs")
# Remove 'dep_delay' from the result as it's perfectly correlated with itself
cor_with_target <- cor_with_target[names(cor_with_target) != "dep_delay"]
# Sort the correlations by absolute value in descending order
cor_with_target_sorted <- sort(cor_with_target, decreasing = TRUE, method = "radix")
# Print the sorted result
print(cor_with_target_sorted)
# Select numeric columns
numeric_columns <- flights[, sapply(flights, is.numeric)]
# Remove columns with zero variance (standard deviation = 0)
numeric_columns <- numeric_columns[, sapply(numeric_columns, function(x) sd(x, na.rm = TRUE) > 0)]
# Remove rows with missing values in 'dep_delay' and other numeric columns
valid_data <- flights[!is.na(flights$dep_delay) & complete.cases(numeric_columns), ]
# Compute the correlation between 'dep_delay' and the other numeric columns
cor_with_target <- cor(valid_data[, sapply(valid_data, is.numeric)], valid_data$dep_delay, use = "complete.obs")
# Check the structure of the correlation result
print(cor_with_target)
# Load necessary library
library(ggplot2)
# Create a data frame with 'dep_delay' and 'arr_delay' columns for plotting
df_delays <- flights[, c("dep_delay", "arr_delay")]
# Reshape the data to long format for easier plotting
library(tidyr)
df_long <- gather(df_delays, key = "delay_type", value = "delay", dep_delay, arr_delay)
# Create the bar chart using ggplot
ggplot(df_long, aes(x = delay_type, y = delay, fill = delay_type)) +
geom_bar(stat = "identity", position = "dodge", show.legend = FALSE) +
labs(title = "Departure vs Arrival Delays",
x = "Delay Type",
y = "Delay in Minutes") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
df <- df %>%
mutate(delayed = ifelse(dep_delay > 15, "Yes", "No")) %>%
select(dep_time, arr_time, air_time, distance, dep_delay, arr_delay, delayed) %>%
na.omit()  # Remove missing values
df$delayed <- as.factor(df$delayed)
set.seed(123)  # For reproducibility
train_index <- sample(1:nrow(df), 0.7 * nrow(df))  # 70% training data
train_data <- df[train_index, ]
test_data <- df[-train_index, ]
head(train_data)  # View first few rows
# Load necessary library
library(ggplot2)
# Assuming 'df' is your full dataset
# Create a scatter plot to compare dep_delay and arr_delay
ggplot(df, aes(x = dep_delay, y = arr_delay)) +
geom_point(alpha = 0.1, color = "blue") +  # alpha for transparency
labs(title = "Comparison of Departure Delay vs Arrival Delay",
x = "Departure Delay (minutes)",
y = "Arrival Delay (minutes)") +
theme_minimal()
# Load necessary library
library(ggplot2)
# Assuming 'df' is your full dataset
# Create a scatter plot to compare dep_delay and dep_time
ggplot(df, aes(x = dep_time, y = dep_delay)) +
geom_point(alpha = 0.1, color = "blue") +  # alpha for transparency
labs(title = "Comparison of Departure Time vs Departure Delay",
x = "Departure Time (minutes)",
y = "Departure Delay (minutes)") +
theme_minimal()
```{r}
ggplot(df, aes(x = distance, y = dep_delay)) +
geom_point(alpha = 0.1, color = "blue") +  # alpha for transparency
labs(title = "Comparison of Distance vs Departure Delay",
x = "Distance (miles)",
y = "Departure Delay (minutes)") +
theme_minimal()
